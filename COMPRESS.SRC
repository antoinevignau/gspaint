;======================================================;;                                                      ;;              C O M P R E S S                         ;;                                                      ;;======================================================;compress       start               Using Allequ               Using Strings               using Anime_data               using Data               Using CursPat               using cursor               Pea  0               PushPtr MaPalette               _GetColorTable               _ShowCursor               movelong PtrStock,pPic2               Pea  GetFilex            X               Pea  GetFiley            Y               PushPtr Select_str               Lda  #0               Pha               Pha               PushPtr ListType               PushPtr Reponse               _SFGetFile               Jsr  ForceUpdate               Lda  Good               Bne  DoCompressrts            rtsListType       dc   i1'2,$C0,6'DoCompress     Anop* recupere le nom du fichier               lda Filename               and #$3f               pha               taxmore           lda Filename,x               and #$7f               cmp #'/'               beq found               dex               bne morefound          phx               ldy #$ffff               dexmore2          inx               inx               iny               iny               lda Filename,x               sta mantisse,y               txa               cmp 3,s               blt more2               lda 3,s               sec               sbc 1,s               pha               lda mantisse               and #$ff00               ora 1,s               sta mantisse               pla               pla               pla*       ok now on vire le numero du bout               lda mantisse               and #$0f               taxmore3          Anop               lda mantisse,x               and #$7f               cmp #'0'               blt stop               cmp #'9'+1               bge stop               dex               bne more3stop           cpx #0               beq rts               phx               lda mantisse               and #$ff00               ora 1,s               sta mantisse               pla               _hideCursor               lda #$2000               sta pScreen               lda #$00e1               sta pScreen+2               lda used               beq cleaned               lda #$ffff               sta used               pushlong hMod               _hunlock               pushlong hMod               _DisposeHandle               stz Hmod_size               stz Hmod_size+2cleaned        Anop               PushLong #00             ; Output : Handle.               PushLong #$2000           ; Block Size.               PushWord MyID            ; Owner.               PushWord #$8008          ; not purgeable !               PushLong #00             ; Anywhere.               _NewHandle               bcc     *+4               brk     02               pla               sta hmod               pla               sta hmod+2               lda [hmod]               sta pmod               ldy #2               lda [hmod],y               sta pmod+2               lda #4               sta pos               sta [pMod]               ldy #2               lda #0               sta pos+2               sta [Pmod],y               lda #$2000               sta Hmod_size               stz Hmod_size+2* on charge la premiere image a l'ecran* puis la deuxieme par petit coups dans un buffer* on sauve les modifs dans un 3eme handle* et on passe a la suivante               jsr CreateHandles               jsr readdir               lda numfiles               cmp #2               bge go               jmp quitgo             anop                              jsr allhtop               lda #0               sta image_num* numfile entry qui font lenentry de long               lda [pallentry]               and #$ff0f               sta [pallentry]               ldy #14transname1      lda [pallentry],y               sta picname0,y               sta filename,y               dey               dey               bpl transname1               ldy #$10               lda [pallentry],y               and #$ff               Sta  Type0               jsr Load_image               lda #lenentry               clc               adc pallentry               sta pallentry               lda pallentry+2               adc #0               sta pallentry+2               inc image_num               bra morepicsnopics0        brl nopicsmorepics       anop               lda [pallentry]               and #$ff0f               sta [pallentry]               ldy #14transname      lda [pallentry],y               sta filename,y               dey               dey               bpl transname               ldy #$10               lda [pallentry],y               and #$ff               jsr load2_image               jsr compress_image               bcs nopics0               lda pos               tay               lda #0               sta [pmod],y               jsr Add4               bcs nopics0               lda #lenentry               clc               adc pallentry               sta pallentry               lda pallentry+2               adc #0               sta pallentry+2               inc image_num               lda image_num               cmp numfiles               bne morepics               ldx #14trans3         lda picname0,x               sta Filename,x               dex               dex               bpl trans3               lda Type0               jsr load2_image               jsr compress_image               bcs nopics0               lda pos               tay               lda #0               sta [pmod],y               jsr Add4               Pea  0               PushPtr MaPalette               _SetColorTable               _Refresh               _InitPalette               _DrawMenuBar               _ShowCursor               jsr forceUpdate* ok now we save the current picture and the animation data* are you ready Eddy ?               lda suffixe               and #$0f               pha               lda mantisse               and #$0f               cmp #10               blt small               lda #10small          Anop               tax               clc               adc 1,s               pha               lda mantisse               and #$ff00               ora 1,s               sta mantisse               pla               ldy #1suff_more      lda suffixe,y               sta mantisse+1,x               inx               inx               iny               iny               tya               cmp 1,s               blt suff_more               beq suff_more               pla* ok now               PushLong FlechePtr               _SetCursor               Jsr  GetTiming               Pea  20                  X               Pea  30                  Y               PushPtr SaveShow               PushPtr Mantisse               Pea  15               PushPtr Reponse               _SFPutFile               jsr forceUpdate               _Showcursor               Lda  Good               bne  cont1               Brl  freememcont1          Anop               pushptr Watch               _setcursor               _create Create_show               _setFileInfo Create_show               _open Open_show               lda open_show               sta SetEOF_show               sta Wscreen_show               sta Wlength_show               STa  WTiming_Show               sta Wmod_show               _SetEOF SetEOF_show               lda pos               sta Mod_length               lda pos+2               sta Mod_length+2               lda [hmod]               sta Wmod_show+2               sta pmod               ldy #2               lda [hmod],y               sta Wmod_show+4               sta pmod+2               lda pos               sta [pmod]               lda pos+2               sta [pmod],y               lda pPic2               sta Wscreen_show+2               lda pPic2+2               sta Wscreen_show+4               _write Wscreen_show               _write Wlength_show               _Write WTiming_Show* prodos i will kill prodos it is so stupid just $ffff* bytes at a time I can't believe it !!!!!               lda #$0               sta Wmod_show+8Write_prodos   lda Mod_length+2               beq One_shot               lda #$FFFF               sta Wmod_show+6               _write Wmod_show               lda #$FFFF               clc               adc Wmod_show+2               sta Wmod_show+2               lda #0               adc Wmod_show+4               sta Wmod_show+4               lda Mod_length               sec               sbc #$ffff               sta Mod_length               lda mod_length+2               sbc #0               sta Mod_length+2               jmp Write_prodosOne_shot       lda Mod_length               beq Shot_done               sta Wmod_show+6               _write Wmod_showShot_done      Anop               _close Open_show               pushlong flechePtr               _setcursorfreemem        Anop               pushlong hMod               _hunlock               pushlong hMod               _DisposeHandle               stz  usednopics         Anop               lda [hmod]               sta pmod               ldy #2               lda [hmod],y               sta pmod+2               lda pos               sta [pmod]               lda pos+2               sta [pmod],y               jsr RemoveHandlesquit           rtsnewSize        Entry               pushlong Hmod               _hunlock               lda Hmod_size               clc               adc #$2000               sta Hmod_size               bcc bye               inc Hmod_size+2Bye            Anop               PushLong Hmod_size               PushLong Hmod               _setHandleSize               bcs stopall               PushLong Hmod               _hLock               lda [hmod]               sta pmod               ldy #2               lda [hmod],y               clc               adc pos+2               sta pmod+2               clc               rtsStopall        Anop               PushLong Hmod               _hLock               lda hmod_size               sec               sbc #$2000               sta hmod_size               lda hmod_size+2               sbc #0               sta hmod_size+2               sec               rtsload_image     Entry               jsr load2_image* pic2 to screen               Ldy #$7e1ell             lda [pPic2],y               sta [pScreen],y               dey               dey               bpl ll               rtsload2_image    Entry               sta FileType               cmp #$6               beq screen               Cmp  #$C1               Beq  Screen               Cmp  #$C0               Beq  PaintF               Brk  $FFPaintF         Anop               jsr loadp_anime               rtsscreen         jsr loadp1_anime               rts;------------------------------------------------------;;              Compress_image;Compress_image Entry               ldy #0testmore       lda [pPic2],y               cmp [pScreen],y               beq next               sta [pscreen],y               tax               phy               lda Pos               tay               lda 1,s               sta [pMod],y               iny               iny               txa               sta [pMod],y               jsr Add4               bcc more10               pla               sec               rtsmore10         Anop                plynext           Iny               Iny               Cpy  #$7e20               bne testmore               clc               rtsAdd4           Entry               lda pos               clc               adc #4               sta pos               bcc Add4_1               inc pos+2               inc pmod+2Add4_1         Anop               lda pos+2               cmp Hmod_size+2               blt Add4_2               bne Add4_3               lda pos               cmp Hmod_size               blt Add4_2Add4_3         Anop               jsr NewSize               rtsAdd4_2         clc               Rts;------------------------------------------------------;;              GetTiming;GetTiming      Anop               Pha               Pha               PushPtr WinRect               Pea  True               PushLong #0               _NewModalDialog               Pla               Sta  DialPort               Pla               Sta  DialPort+2               PushLong DialPort               _SetPort               Pea  0               Pea  0               _SetOrigin               Pea  85               Lda  FillBlanc+4               Dea               Pha               _MoveTo               PushPtr TxtTiming               _DrawString               PushLong DialPort               PushWord #1               PushPtr OkRect               Pea  ButtonItem               PushPtr OkStr               Pea  0               Pea  0               PushLong #0               _NewDItem               PushLong DialPort               Pea  2               PushPtr ScrollRect               Pea  ScrollBarItem               PushPtr ScrolBarProc               Pea  0               Pea  $1C                 Horizontal Scroll               PushLong #0               _NewDItemModalLoop      Anop               Lda  #0               Pha               Pha               Pha               _ModalDialog               Pla               Cmp  #1               Bne  ModalLoop               PushLong DialPort               _CloseDialog               Jsr  ForceUpdate               RtsScrolBarProc   AnopProcZPage      Equ  1ProcSaveB      Equ  ProcZPage+2ProcRts        Equ  ProcSaveB+1ProcScrolBID   Equ  ProcRts+3ProcDialog     Equ  ProcScrolBId+2ProcCommand    Equ  ProcDialog+4ProcResult     Equ  ProcCommand+2               Nop               Phd               Phb               Phk               Plb               Lda  MyZPage               Tcd               Lda  ProcCommand,s               Dea               Asl  A               Tax               Jmp  (TableCommand,x)GetInitWiew    Anop               Lda  #0               Sta  ProcResult,s               Brl  Exit1GetInitTotal   Anop               Lda  #127               Sta  ProcResult,s               Brl  Exit1GetInitValue   Anop               Lda  #2               Sta  Timing               Sta  ProcResult,s               Jsr  AffTiming               Brl  Exit1Act_Gauche     Anop               Lda  Timing               Jeq  Exit               Dea               Jsr  AffTiming               Brl  ExitAct_Droite     Anop               Lda  Timing               Cmp  #127               Jge  Exit               Ina               Jsr  AffTiming               Brl  ExitAct_PGauche    Anop               Sec               Lda  Timing               Sbc  #5               Bpl  Ok1               Stz  TimingOk1            Anop               Jsr  AffTiming               Brl  ExitAct_PDroite    Anop               Clc               Lda  Timing               Adc  #5               Cmp  #127               Blt  Ok2               Lda  #127               Sta  TimingOk2            Anop               Jsr  AffTiming               Brl  ExitAct_Thumb      Anop               Pha               PushLong DialPort               Pea  2               _GetItemValue               Pla               Sta  Timing               Jsr  AffTimingExit           Anop               Lda  Timing               Sta  ProcResult,sExit1          Anop               Plb               Pld               Lda  0,s               Sta  8,s               Lda  2,s               Sta  10,s               Pla               Pla               Pla               Pla               RtlAffTiming      Anop               Sta  Timing               PushPtr FillBlanc               PushPtr White               _FillRect               PushWord Timing               PushPtr StrTiming+1               PushWord StrTiming               Pea  0               _Int2Dec               Lda  FillBlanc+2               Pha               Lda  FillBlanc+4               Dea               Pha               _MoveTo               PushPtr StrTiming               _DrawString               RtsTableCommand   dc   i'GetInitWiew'               dc   i'GetInitTotal'               dc   i'GetInitValue'               dc   i'Act_Gauche'               dc   i'Act_Droite'               dc   i'Act_PGauche'               dc   i'Act_PDroite'               dc   i'Act_Thumb'WinRect        Dc   i'40,55,100,305'OkRect         dc   i'40,90,54,160'ScrollRect     dc   i'21,25,34,225'FillBlanc      dc   i'5,142,15,180'StrTiming      dc   i1'4'               dc   c'    '               Rts               end